<div class="container mt-5 mb-4 p-4 border rounded shadow" style="width: 60%;">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <form id="productForm">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="titleInput" placeholder="">
                    <label for="titleInput">Titulo del producto</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="descriptionInput" placeholder="">
                    <label for="descriptionInput">Descripcion</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="priceInput" placeholder="">
                    <label for="priceInput">Precio $</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="stockInput" placeholder="">
                    <label for="stockInput">Stock disponible</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="categoryInput" placeholder="">
                    <label for="stockInput">Categoria</label>
                </div>
                <input class="btn btn-primary" type="submit" value="Agregar producto">
            </form>
        </div>
    </div>
</div>
<div class="container">
    <div class="row" id="conteiner"></div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.2.0/socket.io.js"></script>
<script type="module">
    const contenedor = document.getElementById('conteiner');
    const productsContainer = document.getElementById('productsContainer'); // Nueva referencia
    const jsonFilePath = '/api/products';
    const socket = io();

    const productForm = document.getElementById('productForm');

    // Maneja el envío del formulario para agregar producto
    productForm.addEventListener('submit', async function (event) {
        event.preventDefault();

        const title = document.getElementById('titleInput').value;
        const description = document.getElementById('descriptionInput').value;
        const price = document.getElementById('priceInput').value;
        const stock = document.getElementById('stockInput').value;
        const category = document.getElementById('categoryInput').value;

        const newProduct = {
            title,
            description,
            price,
            stock,
            category
        };

        // Envía el nuevo producto al servidor
        socket.emit('addProduct', newProduct);
    });

    // Escucha el evento de producto agregado y vuelve a cargar los productos
    socket.on('productAdded', ({ addedProduct }) => {
        console.log('Producto agregado:', addedProduct);
        cargarProductos();
    });

    // Función para manejar la eliminación de productos
    socket.on('productDeleted', ({ productId }) => {
        console.log('Producto eliminado:', productId);
        cargarProductos();
    });

    // Implementación de cargarProductos
    const cargarProductos = () => {
        fetch(jsonFilePath)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error al obtener el archivo JSON: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                const products = data.products;

                // Limpiar contenedor antes de volver a renderizar
                contenedor.innerHTML = '';

                // Itera sobre cada producto y renderiza la plantilla
                products.forEach(product => {
                    const card = document.createElement('div');
                    card.className = 'col-md-3'; // Cada tarjeta ocupa 3 columnas en dispositivos medianos (md)
                    card.innerHTML = `
                      <div class="card mt-3" style="margin-bottom: 20px;">
                        <img src="${product.thumbnail || 'https://cdn.pixabay.com/photo/2017/01/25/17/35/picture-2008484_1280.png'}" class="card-img-top" alt="...">
                        <div class="card-body">
                        <h5 class="card-title">${product.title}</h5>
                        <p class="card-text">Descricion: ${product.description}</p>
                        <p class="card-text">Price: ${product.price}</p>
                        <p class="card-text">Stock: ${product.stock}</p>
                        <p class="card-text">Category: ${product.category}</p>
                        <button class="btn btn-primary delete-button" data-product-id="${product.id}">Eliminar Producto</button>
                      </div>
                    `;
                    contenedor.appendChild(card);
                });

                // Agregamos eventos de clic a los botones de eliminación
                const deleteButtons = document.querySelectorAll('.delete-button');
                deleteButtons.forEach(button => {
                    button.addEventListener('click', handleDeleteButtonClick);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    };

    // Inicializa la carga de productos al inicio
    cargarProductos();

    // Implementación de eliminarProducto
    const handleDeleteButtonClick = (event) => {
        const productId = event.target.dataset.productId;
        try {
            socket.emit('deleteProduct', { productId });
        } catch (error) {
            console.error('Error al intentar eliminar el producto:', error);
        }
    };
</script>